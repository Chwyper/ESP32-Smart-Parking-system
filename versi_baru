// ===== BLYNK CONFIG =====
#define BLYNK_TEMPLATE_ID "TMPL69qn0JG8J"
#define BLYNK_TEMPLATE_NAME "SmartPark"
#define BLYNK_AUTH_TOKEN "DwmqG5odRhXk06ABj01NSRwVBtmhumz5"

#include <ESP32Servo.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <BlynkSimpleEsp32.h>

// ===== WIFI CONFIG =====
const char* ssid = "Poppol";
const char* password = "12345678";

// ===== FIREBASE CONFIG =====
const char* firebaseHost = "your-app-default-rtdb.asia-southeast1.firebasedatabase.app";

// ===== PIN SETUP =====
#define RST_PIN 22
#define SS_PIN 21
#define SERVO_PIN 2
#define TOUCH_PIN 14
#define TOUCH_PIN2 27
#define TOUCH_PIN3 33
#define TOUCH_PIN4 32
#define TRIG_PIN 5
#define ECHO_PIN 17
#define TRIG_PIN_OUT 12
#define ECHO_PIN_OUT 13
#define SDA_LCD 25
#define SCL_LCD 26

// ===== OBJEK =====
MFRC522 rfid(SS_PIN, RST_PIN);
Servo myServo;
LiquidCrystal_I2C lcd(0x27, 16, 2);

bool isOpen = false;
unsigned long openTime = 0;
bool ultrasonicDetectedEntry = false;
unsigned long ultrasonicStartTimeEntry = 0;
bool slotTerisi[4] = {false, false, false, false};

String slotIds[4] = {"slot1", "slot2", "slot3", "slot4"};

void setup()
{
    Serial.begin(115200);
    SPI.begin();
    rfid.PCD_Init();
    Wire.begin(SDA_LCD, SCL_LCD);
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Sistem Parkir");
    lcd.setCursor(0, 1);
    lcd.print("Smart Dimulai");
    delay(2000);
    lcd.clear();

    myServo.attach(SERVO_PIN);
    myServo.write(0);

    pinMode(TOUCH_PIN, INPUT);
    pinMode(TOUCH_PIN2, INPUT);
    pinMode(TOUCH_PIN3, INPUT);
    pinMode(TOUCH_PIN4, INPUT);
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    pinMode(TRIG_PIN_OUT, OUTPUT);
    pinMode(ECHO_PIN_OUT, INPUT);
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);

    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
    }
    Serial.println("WiFi connected");
}

void loop()
{
    Blynk.run();

    slotTerisi[0] = digitalRead(TOUCH_PIN);
    slotTerisi[1] = digitalRead(TOUCH_PIN2);
    slotTerisi[2] = digitalRead(TOUCH_PIN3);
    slotTerisi[3] = digitalRead(TOUCH_PIN4);

    updateSlotStatus();

    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())
    {
        String uid = getUID();
        int slot = cariSlotKosong();
        if (slot != -1)
        {
            bukaGerbang("rfid", uid, slot);
        }
        else
        {
            lcdPrintPenuh();
            Blynk.virtualWrite(V5, "RFID: Penuh");
        }
        rfid.PICC_HaltA();
        rfid.PCD_StopCrypto1();
    }

    float distanceEntry = jarakMasuk();
    if (distanceEntry >= 6.0 && distanceEntry <= 9.0)
    {
        if (!ultrasonicDetectedEntry)
        {
            ultrasonicDetectedEntry = true;
            ultrasonicStartTimeEntry = millis();
        }
        else if (millis() - ultrasonicStartTimeEntry > 2000 && !isOpen)
        {
            int slot = cariSlotKosong();
            if (slot != -1)
            {
                bukaGerbang("ultrasonic", "", slot);
            }
            else
            {
                lcdPrintPenuh();
                Blynk.virtualWrite(V5, "Sensor: Penuh");
            }
            ultrasonicDetectedEntry = false;
        }
    }
    else
    {
        ultrasonicDetectedEntry = false;
    }

    float distanceExit = jarakKeluar();
    if (distanceExit >= 2.0 && distanceExit <= 4.5 && !isOpen)
    {
        bukaGerbang("exit", "", -1);
    }

    if (isOpen && millis() - openTime > 7000)
    {
        myServo.write(0);
        isOpen = false;
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Gerbang Ditutup");
        Blynk.virtualWrite(V5, "Gerbang Ditutup");
    }

    delay(300);
}

void bukaGerbang(String trigger, String uid, int slot)
{
    myServo.write(90);
    isOpen = true;
    openTime = millis();

    lcd.clear();
    lcd.setCursor(0, 0);
    if (slot >= 0)
    {
        lcd.print("Slot ");
        lcd.print(slot + 1);
        lcd.setCursor(0, 1);
        lcd.print("Silakan Masuk");
    }
    else
    {
        lcd.print("Terima Kasih");
        lcd.setCursor(0, 1);
        lcd.print("Hati-hati!");
    }

    Blynk.virtualWrite(V5, trigger + ": Gerbang Dibuka");

    if (WiFi.status() == WL_CONNECTED)
    {
        HTTPClient http;
        String url = "https://" + String(firebaseHost) + "/gate_events.json";
        http.begin(url);
        http.addHeader("Content-Type", "application/json");

        StaticJsonDocument<256> doc;
        doc["gateId"] = "gate1";
        doc["trigger"] = trigger;
        doc["uid"] = uid;
        doc["slot"] = slot + 1;
        doc["status"] = "open";
        doc["timestamp"] = millis();

        String jsonData;
        serializeJson(doc, jsonData);
        http.POST(jsonData);
        http.end();
    }
}

void updateSlotStatus()
{
    for (int i = 0; i < 4; i++)
    {
        Blynk.virtualWrite(V0 + i, slotTerisi[i]);
        updateFirebaseSlot(slotIds[i], slotTerisi[i]);
    }
}

void updateFirebaseSlot(String slotId, bool status)
{
    if (WiFi.status() == WL_CONNECTED)
    {
        HTTPClient http;
        String url = "https://" + String(firebaseHost) + "/parking_slots/" + slotId + ".json";
        http.begin(url);
        http.addHeader("Content-Type", "application/json");
        http.PUT(status ? "true" : "false");
        http.end();
    }
}

int cariSlotKosong()
{
    for (int i = 0; i < 4; i++)
    {
        if (!slotTerisi[i])
            return i;
    }
    return -1;
}

String getUID()
{
    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++)
    {
        uid += (rfid.uid.uidByte[i] < 0x10 ? "0" : "");
        uid += String(rfid.uid.uidByte[i], HEX);
        if (i < rfid.uid.size - 1)
            uid += ":";
    }
    uid.toUpperCase();
    Serial.println("UID: " + uid);
    return uid;
}

float jarakMasuk()
{
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    long dur = pulseIn(ECHO_PIN, HIGH, 30000);
    return dur * 0.034 / 2;
}

float jarakKeluar()
{
    digitalWrite(TRIG_PIN_OUT, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN_OUT, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN_OUT, LOW);
    long dur = pulseIn(ECHO_PIN_OUT, HIGH, 30000);
    return dur * 0.034 / 2;
}

void lcdPrintPenuh()
{
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Parkiran Penuh");
    lcd.setCursor(0, 1);
    lcd.print("Tunggu Kosong");
}
